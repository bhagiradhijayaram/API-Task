const express = require('express')
const path = require('path')
const {open} = require('sqlite')
const sqlite3 = require('sqlite3')
const bcrypt = require('bcrypt')

const app = express()
app.use(express.json()) // Add this to parse JSON payloads

const dbPath = path.join(__dirname, 'userData.db')
let db = null

const initializeDBAndServer = async () => {
  try {
    db = await open({
      filename: dbPath,
      driver: sqlite3.Database,
    })
    app.listen(3000, () => {
      console.log('Server Running at http://localhost:3000/')
    })
  } catch (e) {
    console.log(`DB Error: ${e.message}`)
    process.exit(1)
  }
}

initializeDBAndServer()

const validatePassword = password => {
  return password.length >= 5
}

// Register API
app.post('/register/', async (request, response) => {
  const {username, name, password, gender, location} = request.body
  const hashedPassword = await bcrypt.hash(password, 10)
  const selectUserQuery = `SELECT * FROM user WHERE username = '${username}'`
  const dbUser = await db.get(selectUserQuery)

  // Check password length
  if (password.length < 5) {
    return response.status(400).send('Password is too short')
  }

  if (dbUser === undefined) {
    const createUserQuery = `
      INSERT INTO 
        user (username, name, password, gender, location) 
      VALUES 
        (
          '${username}', 
          '${name}',
          '${hashedPassword}', 
          '${gender}',
          '${location}'
        )`
    await db.run(createUserQuery)
    response.send('User created successfully')
  } else {
    response.status(400).send('User already exists')
  }
})

// Login API
app.post('/login/', async (request, response) => {
  const {username, password} = request.body
  const selectUserQuery = `SELECT * FROM user WHERE username = ?` // Use parameterized query
  const dbUser = await db.get(selectUserQuery, [username]) // Pass parameters as array

  if (dbUser === undefined) {
    response.status(400).send('Invalid user')
  } else {
    const isPasswordMatched = await bcrypt.compare(password, dbUser.password)
    if (isPasswordMatched) {
      response.status(200).send('Login success!')
    } else {
      response.status(400).send('Invalid password')
    }
  }
})

// API 3: Change password
app.put('/change-password', async (req, res) => {
  const {username, currentPassword, newPassword} = req.body

  // Check if the user exists
  const query = `SELECT * FROM user WHERE username = '${username}';`
  const databaseUser = await db.get(query)

  if (databaseUser === undefined) {
    res.status(400).send('Invalid user')
  } else {
    // Validate the current password
    const isPasswordCorrect = await bcrypt.compare(
      currentPassword,
      databaseUser.password,
    )

    if (isPasswordCorrect === true) {
      if (validatePassword(newPassword)) {
        // Hash the new password
        const hashedNewPassword = await bcrypt.hash(newPassword, 10)
        // Update the password in the database
        const updateQuery = `UPDATE user SET password = '${hashedNewPassword}' WHERE username = '${username}'`
        await db.run(updateQuery)
        res.status(200).send('Password updated')
      } else {
        res.status(400).send('Password is too short')
      }
    } else {
      res.status(400).send('Invalid current password')
    }
  }
})

module.exports = app
